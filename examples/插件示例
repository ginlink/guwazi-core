export = (ctx: PicGo) => {
  initI18n(ctx)
  const register = (): void => {
    ctx.cmd.register('migrate', {
      handle(ctx: PicGo) {
        ctx.cmd.program
          .command('migrate <files...>')
          .description('migrating pictures url from markdown files')
          .action(async (files: string[]) => {
            const userConfig = ctx.getConfig<IMigraterConfig>('picgo-plugin-pic-migrater')
            if (!userConfig) {
              ctx.log.warn('You should configurate this plugin first!')
              ctx.log.info('picgo set plugin pic-migrater')
              return
            }
            files = files.map(item => path.resolve(item))
            let inputFiles = []
            for (const filePath of files) {
              // make sure filePath exists
              if (fs.existsSync(filePath)) {
                const status = fs.statSync(filePath)
                if (status.isDirectory()) {
                  let mdFiles = await globby(['**/*.md'], { cwd: filePath, dot: true })
                  mdFiles = mdFiles.map((file: string) => path.resolve(filePath, file))
                  inputFiles = inputFiles.concat(mdFiles)
                } else if (status.isFile()) {
                  inputFiles.push(filePath)
                }
              }
            }
            if (inputFiles.length > 0) {
              await migrateFiles(ctx, inputFiles)
            }
          })
          .on('--help', () => {
            console.log(
              `
              Note:
              You should configurate this plugin first!
              picgo set plugin pic-migrater
              Examples:
                # migrate file or files
                $ picgo migrate ./test.md ./test1.md
                # migrate markdown files in folder
                $ picgo migrate ./test/
                `.replace(/  +/g, '')
            )
          })
      }
    })
  }
  return {
    register,
    config,
    guiMenu,
    migrateFiles: migrateFiles.bind(null, ctx)
  }
}
